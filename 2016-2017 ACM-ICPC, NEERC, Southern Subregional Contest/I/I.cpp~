#include <bits/stdc++.h>
using namespace std;

void make_edge(int a,int b,int cap,int cost) {
	edge[++e].nex = fst[a]; fst[a] = e; edge[e].v = b; edge[e].cap = cap; edge[e].cost = cost;
	edge[++e].nex = fst[b]; fst[b] = e; edge[e].v = a; edge[e].cap = 0; edge[e].cost = -cost;
}

bool solve() {
	dis[s] = 0; cl++;
	int L = 0, R = 0;
	que[++R] = s; okay[u] = cl; vis[u] = cl;
	while (L < R) {
		int u = que[++L];
		okay[u] = 0;
		for (int i = fst[u]; i; i = edge[i].nex) {
			int v = edge[i].v;
			if (edge[i].cap && (vis[v] != cl || (vis[v] == cl && dis[v] < dis[u] + edge[i].cost))) {
				dis[v] = dis[u] + edge[i].cost;
				pas[v] = i;
				if (okay[v] != cl) que[++R] = v, okay[v] = cl;
			}
		}
	}
}

int main() {
	freopen("I.in","r",stdin);
	freopen("I.out","w",stdout);
	scanf("%d %d %d",&n,&A,&B);
	s = n + 1;
	t = n + 2;
	a = n + 3;
	b = n + 4;
	for (int i = 1; i <= n; i++) {
		int x;
		scanf("%d",&x);
		make_edge(i, a, 1, x);
	}

	for (int i = 1; i <= n; i++) {
		int x;
		scanf("%d",&x);
		make_edge(i, b, 1, x);
	}

	make_edge(a, t, A, 0);
	make_edge(b, t, B, 0);
	for (int i = 1; i <= n; i++)
		make_edge(s, i, 1, 0);

	while(solve());
	return 0;
}
